"""
Script de test pour la nouvelle architecture de stock simplifi√©e
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import sqlite3
from decimal import Decimal
from datetime import datetime
from ayanna_erp.database.database_manager import DatabaseManager
from ayanna_erp.modules.stock.controllers.entrepot_controller import EntrepotController
from ayanna_erp.modules.stock.controllers.stock_controller import StockController


def test_new_architecture():
    """Test complet de la nouvelle architecture"""
    print("üß™ TEST DE LA NOUVELLE ARCHITECTURE STOCK")
    print("=" * 50)
    
    entreprise_id = 1
    test_results = []
    
    # Test 1: Initialisation des contr√¥leurs
    print("\nüìã Test 1: Initialisation des contr√¥leurs...")
    try:
        entrepot_controller = EntrepotController(entreprise_id)
        stock_controller = StockController(entreprise_id)
        print("‚úÖ Contr√¥leurs initialis√©s avec succ√®s")
        test_results.append(("Initialisation contr√¥leurs", "‚úÖ R√©ussi"))
    except Exception as e:
        print(f"‚ùå Erreur initialisation: {e}")
        test_results.append(("Initialisation contr√¥leurs", f"‚ùå √âchec: {e}"))
        return test_results
    
    # Test 2: R√©cup√©ration des entrep√¥ts
    print("\nüìã Test 2: R√©cup√©ration des entrep√¥ts...")
    try:
        db_manager = DatabaseManager()
        with db_manager.get_session() as session:
            warehouses = entrepot_controller.get_all_warehouses(session)
            print(f"‚úÖ {len(warehouses)} entrep√¥ts r√©cup√©r√©s")
            
            if warehouses:
                print("   Entrep√¥ts trouv√©s:")
                for wh in warehouses[:3]:  # Afficher les 3 premiers
                    print(f"     - {wh['name']} ({wh['code']}) - {'D√©faut' if wh['is_default'] else 'Standard'}")
            
            test_results.append(("R√©cup√©ration entrep√¥ts", f"‚úÖ {len(warehouses)} trouv√©s"))
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration entrep√¥ts: {e}")
        test_results.append(("R√©cup√©ration entrep√¥ts", f"‚ùå √âchec: {e}"))
    
    # Test 3: Vue d'ensemble des stocks
    print("\nüìã Test 3: Vue d'ensemble des stocks...")
    try:
        with db_manager.get_session() as session:
            stock_overview = stock_controller.get_stock_overview(session)
            print(f"‚úÖ Vue d'ensemble: {stock_overview['total_items']} √©l√©ments")
            
            if stock_overview['stocks']:
                print("   Premiers stocks:")
                for stock in stock_overview['stocks'][:3]:
                    print(f"     - Produit {stock['product_id']}: {stock['quantity']} unit√©s")
            
            test_results.append(("Vue d'ensemble stocks", f"‚úÖ {stock_overview['total_items']} √©l√©ments"))
    except Exception as e:
        print(f"‚ùå Erreur vue d'ensemble: {e}")
        test_results.append(("Vue d'ensemble stocks", f"‚ùå √âchec: {e}"))
    
    # Test 4: Cr√©ation d'un nouvel entrep√¥t
    print("\nüìã Test 4: Cr√©ation d'un nouvel entrep√¥t...")
    try:
        with db_manager.get_session() as session:
            warehouse_data = {
                'code': f'TEST_{datetime.now().strftime("%H%M%S")}',
                'name': f'Entrep√¥t Test {datetime.now().strftime("%H:%M:%S")}',
                'type': 'Test',
                'description': 'Entrep√¥t cr√©√© pour les tests'
            }
            
            new_warehouse = entrepot_controller.create_warehouse(session, warehouse_data)
            if new_warehouse:
                print(f"‚úÖ Nouvel entrep√¥t cr√©√©: {new_warehouse['name']} (ID: {new_warehouse['id']})")
                test_results.append(("Cr√©ation entrep√¥t", f"‚úÖ ID: {new_warehouse['id']}"))
                
                # Test 4b: Statistiques de l'entrep√¥t
                stats = entrepot_controller.get_warehouse_stats(session, new_warehouse['id'])
                print(f"   Statistiques: {stats['total_products']} produits, valeur: {stats['total_value']:.2f}‚Ç¨")
            else:
                test_results.append(("Cr√©ation entrep√¥t", "‚ùå √âchec: Aucun retour"))
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation entrep√¥t: {e}")
        test_results.append(("Cr√©ation entrep√¥t", f"‚ùå √âchec: {e}"))
    
    # Test 5: Mise √† jour de stock
    print("\nüìã Test 5: Mise √† jour de stock...")
    try:
        with db_manager.get_session() as session:
            # Prendre le premier entrep√¥t et le premier produit
            warehouses = entrepot_controller.get_all_warehouses(session)
            if warehouses:
                warehouse_id = warehouses[0]['id']
                product_id = 1  # Assumons que le produit 1 existe
                
                # Mettre √† jour le stock
                update_result = stock_controller.update_stock(
                    session, product_id, warehouse_id, 
                    Decimal('100.0'), Decimal('5.50'), 
                    'Test mise √† jour', 1
                )
                
                print(f"‚úÖ Stock mis √† jour: Produit {product_id} ‚Üí {update_result['new_quantity']} unit√©s")
                test_results.append(("Mise √† jour stock", f"‚úÖ {update_result['new_quantity']} unit√©s"))
            else:
                test_results.append(("Mise √† jour stock", "‚ùå Aucun entrep√¥t disponible"))
    except Exception as e:
        print(f"‚ùå Erreur mise √† jour stock: {e}")
        test_results.append(("Mise √† jour stock", f"‚ùå √âchec: {e}"))
    
    # Test 6: D√©tails stock produit
    print("\nüìã Test 6: D√©tails stock d'un produit...")
    try:
        with db_manager.get_session() as session:
            product_details = stock_controller.get_product_stock_details(session, 1)
            print(f"‚úÖ D√©tails produit 1: {len(product_details['warehouses'])} entrep√¥ts")
            print(f"   Quantit√© totale: {product_details['total_quantity']}")
            print(f"   Valeur totale: {product_details['total_value']:.2f}‚Ç¨")
            
            test_results.append(("D√©tails stock produit", f"‚úÖ {len(product_details['warehouses'])} entrep√¥ts"))
    except Exception as e:
        print(f"‚ùå Erreur d√©tails produit: {e}")
        test_results.append(("D√©tails stock produit", f"‚ùå √âchec: {e}"))
    
    # Test 7: Historique des mouvements
    print("\nüìã Test 7: Historique des mouvements...")
    try:
        with db_manager.get_session() as session:
            movements = stock_controller.get_stock_movements(session, limit=5)
            print(f"‚úÖ {len(movements)} mouvements r√©cup√©r√©s")
            
            if movements:
                print("   Derniers mouvements:")
                for mov in movements[:3]:
                    print(f"     - Produit {mov['product_id']}: {mov['quantity']} unit√©s ({mov['movement_date']})")
            
            test_results.append(("Historique mouvements", f"‚úÖ {len(movements)} trouv√©s"))
    except Exception as e:
        print(f"‚ùå Erreur historique: {e}")
        test_results.append(("Historique mouvements", f"‚ùå √âchec: {e}"))
    
    # Test 8: Statistiques globales
    print("\nüìã Test 8: Statistiques globales...")
    try:
        with db_manager.get_session() as session:
            stats = stock_controller.get_stock_statistics(session)
            print(f"‚úÖ Statistiques globales:")
            print(f"   Valeur totale: {stats['total_value']:.2f}‚Ç¨")
            print(f"   Produits uniques: {stats['unique_products']}")
            print(f"   Produits en rupture: {stats['out_of_stock_products']}")
            print(f"   Alertes stock faible: {stats['low_stock_alerts']}")
            
            test_results.append(("Statistiques globales", f"‚úÖ {stats['unique_products']} produits"))
    except Exception as e:
        print(f"‚ùå Erreur statistiques: {e}")
        test_results.append(("Statistiques globales", f"‚ùå √âchec: {e}"))
    
    # R√©sum√© final
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 50)
    
    success_count = 0
    for test_name, result in test_results:
        print(f"{result:25} {test_name}")
        if result.startswith("‚úÖ"):
            success_count += 1
    
    print(f"\nüéØ R√©sultat: {success_count}/{len(test_results)} tests r√©ussis")
    
    if success_count == len(test_results):
        print("üéâ TOUS LES TESTS R√âUSSIS! Architecture fonctionnelle.")
    elif success_count >= len(test_results) * 0.75:
        print("‚ö†Ô∏è  Architecture majoritairement fonctionnelle, quelques ajustements n√©cessaires.")
    else:
        print("‚ùå Architecture n√©cessite des corrections importantes.")
    
    return test_results


if __name__ == "__main__":
    test_new_architecture()