"""
Contr√¥leur pour la gestion des r√©servations du module Salle de F√™te
G√®re toutes les op√©rations CRUD pour les r√©servations
"""

import sys
import os
from PyQt6.QtCore import QObject, pyqtSignal
from sqlalchemy.exc import IntegrityError
from sqlalchemy import text
from datetime import datetime, date, timedelta

# Ajouter le chemin vers le mod√®le
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from ayanna_erp.modules.salle_fete.model.salle_fete import (EventReservation, EventClient, EventService, EventProduct,
                              EventReservationService, EventReservationProduct, get_database_manager)


class ReservationController(QObject):
    """Contr√¥leur pour la gestion des r√©servations"""
    
    # Signaux pour la communication avec la vue
    reservation_added = pyqtSignal(object)
    reservation_updated = pyqtSignal(object)
    reservation_deleted = pyqtSignal(int)
    reservations_loaded = pyqtSignal(list)
    error_occurred = pyqtSignal(str)
    
    def __init__(self, pos_id=1):
        super().__init__()
        self.pos_id = pos_id
        
    def set_pos_id(self, pos_id):
        """D√©finir l'ID de l'entreprise"""
        self.pos_id = pos_id
        
    def create_reservation(self, reservation_data, services_data=None, products_data=None):
        from ayanna_erp.modules.comptabilite.model.comptabilite import (
            ComptaEcritures as EcritureComptable, 
            ComptaJournaux as JournalComptable, 
            ComptaComptes as CompteComptable
        )
        """
        Cr√©er une nouvelle r√©servation avec services et produits
        
        Args:
            reservation_data (dict): Donn√©es de la r√©servation
            services_data (list): Liste des services [{service_id, quantity, unit_price}, ...]
            products_data (list): Liste des produits [{product_id, quantity, unit_price}, ...]
            
        Returns:
            EventReservation: La r√©servation cr√©√©e ou None
        """
        try:
            db_manager = get_database_manager(); session = db_manager.get_session()
                
            # Cr√©er la r√©servation principale
            reservation = EventReservation(
                pos_id=self.pos_id,
                partner_id=reservation_data.get('partner_id'),  # Client pr√©-enregistr√©
                client_nom=reservation_data.get('client_nom'),  # Nom saisi directement
                client_prenom=reservation_data.get('client_prenom'),  # Pr√©nom saisi directement
                client_telephone=reservation_data.get('client_telephone'),  # T√©l√©phone
                theme=reservation_data.get('theme', ''),  # Th√®me de l'√©v√©nement
                event_date=reservation_data.get('event_date'),
                event_type=reservation_data.get('type', ''),  # Mapper 'type' -> 'event_type'
                guests_count=reservation_data.get('guests', 1),  # Mapper 'guests' -> 'guests_count'
                status=reservation_data.get('status', 'draft'),
                notes=reservation_data.get('notes', ''),
                discount_percent=reservation_data.get('discount', 0.0),  # Mapper 'discount' -> 'discount_percent'
                tax_rate=reservation_data.get('tax_rate', 20.0),
                created_by=reservation_data.get('created_by', 1)
            )
            
            session.add(reservation)
            session.flush()  # Pour obtenir l'ID
            
            total_services = 0.0
            total_products = 0.0
            total_cost = 0.0
            
            # Ajouter les services
            if services_data:
                for service_data in services_data:
                    service = session.query(EventService).get(service_data['service_id'])
                    if service:
                        line_total = service_data['quantity'] * service_data['unit_price']
                        line_cost = service_data['quantity'] * service.cost
                        
                        reservation_service = EventReservationService(
                            reservation_id=reservation.id,
                            service_id=service_data['service_id'],
                            quantity=service_data['quantity'],
                            unit_price=service_data['unit_price'],
                            line_total=line_total,
                            line_cost=line_cost
                        )
                        session.add(reservation_service)
                        total_services += line_total
                        total_cost += line_cost
                        
            # Ajouter les produits
            if products_data:
                for product_data in products_data:
                    product = session.query(EventProduct).get(product_data['product_id'])
                    if product:
                        line_total = product_data['quantity'] * product_data['unit_price']
                        line_cost = product_data['quantity'] * product.cost
                        
                        reservation_product = EventReservationProduct(
                            reservation_id=reservation.id,
                            product_id=product_data['product_id'],
                            quantity=product_data['quantity'],
                            unit_price=product_data['unit_price'],
                            line_total=line_total,
                            line_cost=line_cost
                        )
                        session.add(reservation_product)
                        total_products += line_total
                        total_cost += line_cost
                        
            # Calculer les totaux
            subtotal = total_services + total_products
            discount_amount = subtotal * (reservation.discount_percent / 100)
            subtotal_after_discount = subtotal - discount_amount
            tax_amount = subtotal_after_discount * (reservation.tax_rate / 100)
            total_amount = subtotal_after_discount + tax_amount
            
            # Mettre √† jour les totaux de la r√©servation
            reservation.total_services = total_services
            reservation.total_products = total_products
            reservation.total_cost = total_cost
            reservation.tax_amount = tax_amount
            reservation.total_amount = total_amount
            
            # Cr√©er un paiement automatique si un acompte est fourni
            deposit_amount = reservation_data.get('deposit', 0.0)
            
            if deposit_amount > 0:
                from ayanna_erp.modules.salle_fete.model.salle_fete import EventPayment
                from ayanna_erp.modules.comptabilite.model.comptabilite import ComptaConfig
                
                payment = EventPayment(
                    reservation_id=reservation.id,
                    amount=deposit_amount,
                    payment_method='Esp√®ces',  # Simplifier en utilisant esp√®ces par d√©faut
                    payment_date=datetime.now(),
                    status='validated',
                    user_id=1,  # TODO: R√©cup√©rer l'ID de l'utilisateur connect√©
                    notes=f"Acompte automatique pour r√©servation {reservation.client_nom} {reservation.client_prenom}"
                )
                session.add(payment)
                session.flush()  # Pour avoir l'ID du paiement
                print(f"üí∞ Paiement d'acompte cr√©√©: {deposit_amount}‚Ç¨")
                
                # R√©cup√©rer la configuration comptable pour ce POS
                config = session.query(ComptaConfig).filter_by(pos_id=self.pos_id).first()
                if not config:
                    print("‚ö†Ô∏è  Configuration comptable manquante pour ce point de vente")
                else:
                    # Cr√©er la ligne de journal comptable
                    libelle = f"Paiement Accompte Reservation: {reservation.client_nom} {reservation.client_prenom}"
                    journal = JournalComptable(
                        enterprise_id=1,  # TODO: R√©cup√©rer l'ID de l'entreprise du POS
                        libelle=libelle,
                        montant=deposit_amount,
                        type_operation="entree",  # 'entree' pour un paiement
                        reference=f"PAY-{payment.id}",
                        description=f"Acompte r√©servation ID: {reservation.id}",
                        user_id=1,  # TODO: R√©cup√©rer l'ID de l'utilisateur connect√©
                        date_operation=datetime.now()
                    )
                    session.add(journal)
                    session.flush()  # Pour avoir l'id du journal

                    # R√©cup√©rer les comptes configur√©s
                    compte_debit = session.query(CompteComptable).filter(CompteComptable.id == config.compte_caisse_id).first()
                    if not compte_debit:
                        raise Exception("Le compte caisse configur√© n'existe pas ou n'est pas actif.")

                    # V√©rifier si le compte TVA est configur√©
                    compte_tva_id = config.compte_tva_id if hasattr(config, 'compte_tva_id') else None
                    if compte_tva_id:
                        compte_tva = session.query(CompteComptable).filter(CompteComptable.id == compte_tva_id).first()
                        if not compte_tva:
                            print("‚ö†Ô∏è  Compte TVA configur√© mais inexistant, TVA sera ignor√©e")
                            compte_tva_id = None

                    # Calculer la r√©partition du paiement selon les comptes sp√©cifiques
                    repartition = self.calculer_repartition_paiement(reservation, deposit_amount)
                    
                    # Cr√©er les √©critures comptables r√©parties
                    ecritures = self.creer_ecritures_comptables_reparties(
                        session=session,
                        reservation=reservation,
                        payment=payment,
                        repartition=repartition,
                        compte_debit_id=compte_debit.id,
                        compte_tva_id=compte_tva_id,
                        journal_id=journal.id
                    )
                    
                    if ecritures:
                        print(f"üìä {len(ecritures)} √©critures comptables cr√©√©es avec r√©partition")
                    else:
                        # Fallback √† l'ancienne m√©thode si probl√®me
                        print("‚ö†Ô∏è  Fallback: cr√©ation d'√©criture simple")
                        ecriture_debit = EcritureComptable(
                            journal_id=journal.id,
                            compte_comptable_id=compte_debit.id,
                            debit=deposit_amount,
                            credit=0,
                            ordre=1,
                            libelle=f"Encaissement acompte - {reservation.client_nom}"
                        )
                        session.add(ecriture_debit)
                        
                        # Utiliser le compte vente g√©n√©ral en fallback
                        compte_vente_general = session.query(CompteComptable).filter(CompteComptable.id == config.compte_vente_id).first()
                        if compte_vente_general:
                            ecriture_credit = EcritureComptable(
                                journal_id=journal.id,
                                compte_comptable_id=compte_vente_general.id,
                                debit=0,
                                credit=deposit_amount,
                                ordre=2,
                                libelle=f"Avance re√ßue - {reservation.client_nom}"
                            )
                            session.add(ecriture_credit)
            else:
                print("‚ÑπÔ∏è  Aucun acompte fourni, pas de paiement cr√©√©")
                
            session.commit()
            session.refresh(reservation)
            
            print(f"‚úÖ R√©servation cr√©√©e: {reservation.client_nom} {reservation.client_prenom}")
            self.reservation_added.emit(reservation)
            return reservation
            
        except Exception as e:
            session.rollback()
            error_msg = f"Erreur lors de la cr√©ation de la r√©servation: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)
            return None
            
        finally:
            db_manager.close_session()
            
    def get_reservation(self, reservation_id):
        """R√©cup√©rer une r√©servation par ID avec tous ses d√©tails"""
        try:
            db_manager = get_database_manager(); session = db_manager.get_session()
            reservation = session.query(EventReservation).filter(
                EventReservation.id == reservation_id,
                EventReservation.pos_id == self.pos_id
            ).first()
            
            if not reservation:
                return None
                
            # R√©cup√©rer les services li√©s
            services = session.query(EventReservationService, EventService).join(
                EventService, EventReservationService.service_id == EventService.id
            ).filter(EventReservationService.reservation_id == reservation_id).all()
            
            # R√©cup√©rer les produits li√©s  
            products = session.query(EventReservationProduct, EventProduct).join(
                EventProduct, EventReservationProduct.product_id == EventProduct.id
            ).filter(EventReservationProduct.reservation_id == reservation_id).all()
            
            # R√©cup√©rer les paiements li√©s avec les noms d'utilisateurs
            payments_query = session.execute(text("""
                SELECT 
                    ep.id, ep.amount, ep.payment_method, ep.payment_date, 
                    ep.status, ep.user_id, ep.notes,
                    COALESCE(cu.name, 'Utilisateur inconnu') as user_name
                FROM event_payments ep
                LEFT JOIN core_users cu ON ep.user_id = cu.id
                WHERE ep.reservation_id = :reservation_id
                ORDER BY ep.payment_date DESC
            """), {'reservation_id': reservation_id})
            
            # Calculer le total pay√© et construire la liste des paiements
            payments_list = []
            total_paid = 0
            
            for payment_row in payments_query:
                if payment_row.status == 'validated':
                    total_paid += payment_row.amount
                    
                payment_data = {
                    'amount': payment_row.amount,
                    'payment_method': payment_row.payment_method,
                    'payment_date': payment_row.payment_date,
                    'status': payment_row.status,
                    'user_id': payment_row.user_id,
                    'user_name': payment_row.user_name,
                    'notes': payment_row.notes or ''
                }
                payments_list.append(payment_data)
            
            remaining_amount = (reservation.total_amount or 0) - total_paid
            
            # Construire le dictionnaire complet
            reservation_details = {
                'id': reservation.id,
                'client_nom': reservation.get_client_name(),
                'client_telephone': reservation.client_telephone or (reservation.client.telephone if reservation.client else ''),
                'theme': reservation.theme or '',
                'event_date': reservation.event_date,
                'event_type': reservation.event_type or '',
                'guests_count': reservation.guests_count or 0,
                'status': reservation.status or 'draft',
                'notes': reservation.notes or '',
                'total_services': reservation.total_services or 0,
                'total_products': reservation.total_products or 0,
                'total_amount': reservation.total_amount or 0,
                'discount_percent': reservation.discount_percent or 0,
                'tax_rate': reservation.tax_rate or 0,
                'tax_amount': reservation.tax_amount or 0,
                'total_paid': total_paid,
                'remaining_amount': remaining_amount,
                'created_at': reservation.created_at,
                'services': [
                    {
                        'name': service.name,
                        'quantity': res_service.quantity,
                        'unit_price': res_service.unit_price,
                        'line_total': res_service.line_total
                    }
                    for res_service, service in services
                ],
                'products': [
                    {
                        'name': product.name,
                        'quantity': res_product.quantity,
                        'unit_price': res_product.unit_price,
                        'line_total': res_product.line_total
                    }
                    for res_product, product in products
                ],
                'payments': payments_list
            }
            
            return reservation_details
            
        except Exception as e:
            error_msg = f"Erreur lors de la r√©cup√©ration de la r√©servation: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)
            return None
            
        finally:
            db_manager.close_session()
            
    def get_all_reservations(self, date_from=None, date_to=None, status=None):
        """
        R√©cup√©rer toutes les r√©servations avec filtres optionnels
        Filtre automatiquement par pos_id (entreprise) de l'utilisateur connect√©
        """
        try:
            db_manager = get_database_manager(); session = db_manager.get_session()
            
            # Filtrage principal par pos_id (entreprise)
            query = session.query(EventReservation).filter(
                EventReservation.pos_id == self.pos_id
            ).join(EventClient, isouter=True)  # LEFT JOIN au cas o√π client supprim√©
            
            # Filtres optionnels
            if date_from:
                query = query.filter(EventReservation.event_date >= date_from)
            if date_to:
                query = query.filter(EventReservation.event_date <= date_to)
            if status:
                query = query.filter(EventReservation.status == status)
                
            reservations = query.order_by(EventReservation.created_at.desc()).all()
            
            self.reservations_loaded.emit(reservations)
            return reservations
            
        except Exception as e:
            error_msg = f"Erreur lors du chargement des r√©servations: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)
            return []
            
        finally:
            db_manager.close_session()
            
    def update_reservation_status(self, reservation_id, new_status):
        """Mettre √† jour le statut d'une r√©servation"""
        try:
            db_manager = get_database_manager(); session = db_manager.get_session()
            reservation = session.query(EventReservation).filter(
                EventReservation.id == reservation_id,
                EventReservation.pos_id == self.pos_id
            ).first()
            
            if not reservation:
                error_msg = f"R√©servation {reservation_id} non trouv√©e"
                self.error_occurred.emit(error_msg)
                return False
                
            old_status = reservation.status
            reservation.status = new_status
            
            if new_status == 'completed':
                reservation.closed_at = datetime.now()
                
            session.commit()
            session.refresh(reservation)
            
            print(f"‚úÖ Statut r√©servation {reservation.reference}: {old_status} ‚Üí {new_status}")
            self.reservation_updated.emit(reservation)
            return True
            
        except Exception as e:
            session.rollback()
            error_msg = f"Erreur lors de la mise √† jour du statut: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)
            return False
            
        finally:
            db_manager.close_session()
    
    def add_reservation(self, reservation_data):
        """Ajouter une nouvelle r√©servation"""
        try:
            # Utiliser la m√©thode create_reservation existante
            reservation = self.create_reservation(reservation_data)
            if reservation:
                self.reservation_added.emit(reservation)
                return True
            return False
            
        except Exception as e:
            error_msg = f"Erreur lors de l'ajout de la r√©servation: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)
            return False
    
    def update_reservation(self, reservation_id, reservation_data):
        """Mettre √† jour une r√©servation existante"""
        try:
            db_manager = get_database_manager(); session = db_manager.get_session()
            reservation = session.query(EventReservation).filter(
                EventReservation.id == reservation_id,
                EventReservation.pos_id == self.pos_id
            ).first()
            
            if not reservation:
                error_msg = f"R√©servation {reservation_id} non trouv√©e"
                self.error_occurred.emit(error_msg)
                return False

            print(f"üîÑ Mise √† jour de la r√©servation {reservation_id}")
            print(f"üìù Donn√©es re√ßues: {reservation_data}")
            
            # Mettre √† jour les informations client
            reservation.client_nom = reservation_data.get('client_nom', reservation.client_nom)
            reservation.client_prenom = reservation_data.get('client_prenom', reservation.client_prenom)
            reservation.client_telephone = reservation_data.get('client_telephone', reservation.client_telephone)
            
            # Mettre √† jour les informations de l'√©v√©nement
            reservation.theme = reservation_data.get('theme', reservation.theme)
            reservation.event_date = reservation_data.get('event_date', reservation.event_date)
            reservation.event_type = reservation_data.get('type', reservation.event_type)
            reservation.guests_count = reservation_data.get('guests', reservation.guests_count)
            reservation.status = reservation_data.get('status', reservation.status)
            reservation.notes = reservation_data.get('notes', reservation.notes)
            
            # Mettre √† jour les montants financiers
            reservation.discount_percent = reservation_data.get('discount', reservation.discount_percent)
            reservation.tax_rate = reservation_data.get('tax_rate', reservation.tax_rate)
            reservation.tax_amount = reservation_data.get('tax_amount', reservation.tax_amount)
            reservation.total_services = reservation_data.get('total_services', reservation.total_services)
            reservation.total_products = reservation_data.get('total_products', reservation.total_products)
            reservation.total_amount = reservation_data.get('total', reservation.total_amount)
            
            # Supprimer les anciens services et produits
            session.query(EventReservationService).filter(
                EventReservationService.reservation_id == reservation_id
            ).delete()
            
            session.query(EventReservationProduct).filter(
                EventReservationProduct.reservation_id == reservation_id
            ).delete()
            
            # Ajouter les nouveaux services
            services_data = reservation_data.get('services', [])
            total_services = 0
            for service_data in services_data:
                if hasattr(service_data, 'service_data'):
                    # Checkbox avec service_data
                    service = service_data.service_data
                    service_id = service.id if hasattr(service, 'id') else service['id']
                    unit_price = service.price if hasattr(service, 'price') else service['price']
                    quantity = 1
                else:
                    # Donn√©es de service normales
                    service_id = service_data.get('service_id') or service_data.get('id')
                    unit_price = service_data.get('unit_price', service_data.get('price', 0))
                    quantity = service_data.get('quantity', 1)
                    print(f"üìã Service: ID={service_id}, Prix={unit_price}, Quantit√©={quantity}")
                
                if service_id is None:
                    print(f"‚ùå Service ID manquant pour: {service_data}")
                    continue
                
                line_total = float(unit_price) * quantity
                total_services += line_total
                
                reservation_service = EventReservationService(
                    reservation_id=reservation_id,
                    service_id=service_id,
                    quantity=quantity,
                    unit_price=float(unit_price),
                    line_total=line_total
                )
                session.add(reservation_service)
            
            # Ajouter les nouveaux produits
            products_data = reservation_data.get('products', [])
            total_products = 0
            for product_data in products_data:
                if hasattr(product_data, 'product_data'):
                    # Checkbox avec product_data
                    product = product_data.product_data
                    product_id = product.id if hasattr(product, 'id') else product['id']
                    unit_price = product.price_unit if hasattr(product, 'price_unit') else product['price_unit']
                    quantity = 1
                else:
                    # Donn√©es de produit normales
                    product_id = product_data.get('product_id') or product_data.get('id')
                    unit_price = product_data.get('unit_price', product_data.get('price_unit', 0))
                    quantity = product_data.get('quantity', 1)
                    print(f"üìã Produit: ID={product_id}, Prix={unit_price}, Quantit√©={quantity}")
                
                if product_id is None:
                    print(f"‚ùå Produit ID manquant pour: {product_data}")
                    continue
                
                line_total = float(unit_price) * quantity
                total_products += line_total
                
                reservation_product = EventReservationProduct(
                    reservation_id=reservation_id,
                    product_id=product_id,
                    quantity=quantity,
                    unit_price=float(unit_price),
                    line_total=line_total
                )
                session.add(reservation_product)
            
            # Mettre √† jour les totaux calcul√©s
            reservation.total_services = total_services
            reservation.total_products = total_products
            
            # Recalculer le total
            subtotal = total_services + total_products
            discount_amount = subtotal * (reservation.discount_percent / 100)
            after_discount = subtotal - discount_amount
            tax_amount = after_discount * (reservation.tax_rate / 100)
            total_amount = after_discount + tax_amount
            
            reservation.tax_amount = tax_amount
            reservation.total_amount = total_amount
            
            session.commit()
            session.refresh(reservation)
            
            print(f"‚úÖ R√©servation {reservation_id} mise √† jour avec succ√®s")
            print(f"üí∞ Nouveaux totaux: Services={total_services}‚Ç¨, Produits={total_products}‚Ç¨, Total={total_amount}‚Ç¨")
            
            self.reservation_updated.emit(reservation)
            return reservation
            
        except Exception as e:
            session.rollback()
            error_msg = f"Erreur lors de la mise √† jour de la r√©servation: {str(e)}"
            print(f"‚ùå {error_msg}")
            print(f"üîç Traceback: {e}")
            self.error_occurred.emit(error_msg)
            return False
            
        finally:
            db_manager.close_session()
            
    def delete_reservation(self, reservation_id):
        """Supprimer une r√©servation (avec ses services et produits)"""
        try:
            db_manager = get_database_manager(); session = db_manager.get_session()
            reservation = session.query(EventReservation).filter(
                EventReservation.id == reservation_id,
                EventReservation.pos_id == self.pos_id
            ).first()
            
            if not reservation:
                error_msg = f"R√©servation {reservation_id} non trouv√©e"
                self.error_occurred.emit(error_msg)
                return False
                
            # Supprimer la r√©servation (cascade supprimera les services/produits li√©s)
            session.delete(reservation)
            session.commit()
            
            print(f"‚úÖ R√©servation supprim√©e: {reservation.reference}")
            self.reservation_deleted.emit(reservation_id)
            return True
            
        except Exception as e:
            session.rollback()
            error_msg = f"Erreur lors de la suppression: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)
            return False
            
        finally:
            db_manager.close_session()
            
    def get_reservations_by_date(self, target_date):
        """R√©cup√©rer les r√©servations pour une date donn√©e"""
        try:
            db_manager = get_database_manager(); session = db_manager.get_session()
            
            if isinstance(target_date, datetime):
                target_date = target_date.date()
                
            reservations = session.query(EventReservation).filter(
                EventReservation.pos_id == self.pos_id,
                EventReservation.event_date >= target_date,
                EventReservation.event_date < target_date + timedelta(days=1)
            ).order_by(EventReservation.event_date).all()
            
            return reservations
            
        except Exception as e:
            error_msg = f"Erreur lors de la r√©cup√©ration des r√©servations: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)
            return []
            
        finally:
            db_manager.close_session()
    
    def load_reservations(self):
        print(f"POS ID: {self.pos_id}")
        try:
            db_manager = get_database_manager(); session = db_manager.get_session()
            
            # R√©cup√©rer toutes les r√©servations avec les clients
            reservations_query = session.query(EventReservation).join(EventClient).filter(
                EventReservation.pos_id == self.pos_id
            ).order_by(EventReservation.event_date.desc())
            
            reservations = reservations_query.all()
            
            # Convertir en dictionnaires pour la vue
            reservations_data = []
            for reservation in reservations:
                client = reservation.client
                reservations_data.append({
                    'id': reservation.id,
                    'reference': reservation.reference or '',
                    'client_nom': f"{client.prenom} {client.nom}" if client else 'Client inconnu',
                    'client_id': reservation.partner_id,
                    'event_date': reservation.event_date,
                    'event_type': reservation.event_type or '',
                    'guests_count': reservation.guests_count or 0,
                    'status': reservation.status or 'draft',
                    'total_amount': float(reservation.total_amount or 0),
                    'total_services': float(reservation.total_services or 0),
                    'total_products': float(reservation.total_products or 0),
                    'notes': reservation.notes or '',
                    'created_at': reservation.created_at
                })
            
            print(f"‚úÖ {len(reservations_data)} r√©servations charg√©es")
            self.reservations_loaded.emit(reservations_data)
            return reservations_data
            
        except Exception as e:
            error_msg = f"Erreur lors du chargement des r√©servations: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)
            return []
            
        finally:
            db_manager.close_session()
            
    def search_reservations(self, search_term):
        """Rechercher des r√©servations par r√©f√©rence, client ou type d'√©v√©nement"""
        try:
            db_manager = get_database_manager(); session = db_manager.get_session()
            search_pattern = f"%{search_term}%"
            
            reservations = session.query(EventReservation).join(EventClient).filter(
                EventReservation.pos_id == self.pos_id,
                (EventReservation.reference.ilike(search_pattern) |
                 EventReservation.event_type.ilike(search_pattern) |
                 EventClient.nom.ilike(search_pattern) |
                 EventClient.prenom.ilike(search_pattern))
            ).order_by(EventReservation.event_date.desc()).all()
            
            self.reservations_loaded.emit(reservations)
            return reservations
            
        except Exception as e:
            error_msg = f"Erreur lors de la recherche: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)
            return []
            
        finally:
            db_manager.close_session()

    def calculer_repartition_paiement(self, reservation, montant_paiement):
        """
        Calcule la r√©partition proportionnelle d'un paiement selon les comptes sp√©cifiques
        
        LOGIQUE CORRECTE : 
        - Calculer les montants nets (HT apr√®s remise) pour chaque service/produit
        - Diviser par le total TTC final pour obtenir les bonnes proportions
        - La TVA repr√©sente sa proportion du total TTC final
        
        Args:
            reservation: Instance de EventReservation
            montant_paiement: Montant du paiement √† r√©partir
            
        Returns:
            dict: {
                'services': {account_id: montant},
                'produits': {account_id: montant},
                'tva': montant_tva,
                'total_ht': montant_ht
            }
        """
        try:
            repartition = {
                'services': {},
                'produits': {},
                'tva': 0.0,
                'total_ht': 0.0
            }
            
            # Total TTC final de la r√©servation
            total_ttc_final = float(reservation.total_amount or 0)
            
            if total_ttc_final <= 0:
                print("‚ö†Ô∏è  Total de la r√©servation = 0, aucune r√©partition possible")
                return repartition
            
            print(f"üìä R√©partition paiement: {montant_paiement}‚Ç¨ sur {total_ttc_final}‚Ç¨ ({montant_paiement/total_ttc_final:.2%})")
            
            # R√©cup√©rer le pourcentage de remise pour calculer les montants nets
            remise_percent = float(reservation.discount_percent or 0)
            
            # === CALCUL DES MONTANTS NETS (HT APR√àS REMISE) ===
            
            # Services : montant net = prix_unitaire * quantit√© * (1 - remise%)
            services_details = {}  # {account_id: {'total_net': x, 'names': []}}
            for service_item in reservation.services:
                service = service_item.service
                if service and hasattr(service, 'account_id') and service.account_id:
                    # Montant brut HT
                    montant_ht_brut = float(service_item.unit_price or 0) * float(service_item.quantity or 1)
                    # Appliquer la remise
                    montant_ht_net = montant_ht_brut * (1 - remise_percent / 100)
                    
                    account_id = service.account_id
                    if account_id not in services_details:
                        services_details[account_id] = {'total_net': 0, 'names': []}
                    
                    services_details[account_id]['total_net'] += montant_ht_net
                    services_details[account_id]['names'].append(service.name)
            
            # Produits : montant net = prix_unitaire * quantit√© * (1 - remise%)
            produits_details = {}  # {account_id: {'total_net': x, 'names': []}}
            for product_item in reservation.products:
                product = product_item.product
                if product and hasattr(product, 'account_id') and product.account_id:
                    # Montant brut HT
                    montant_ht_brut = float(product_item.unit_price or 0) * float(product_item.quantity or 1)
                    # Appliquer la remise
                    montant_ht_net = montant_ht_brut * (1 - remise_percent / 100)
                    
                    account_id = product.account_id
                    if account_id not in produits_details:
                        produits_details[account_id] = {'total_net': 0, 'names': []}
                    
                    produits_details[account_id]['total_net'] += montant_ht_net
                    produits_details[account_id]['names'].append(product.name)
            
            # === R√âPARTITION PROPORTIONNELLE SELON MONTANT NET / TOTAL TTC ===
            
            # R√©partition des services
            for account_id, details in services_details.items():
                proportion = details['total_net'] / total_ttc_final
                montant_service = montant_paiement * proportion
                repartition['services'][account_id] = montant_service
                
                names_str = ', '.join(details['names'][:3])
                if len(details['names']) > 3:
                    names_str += f" (+{len(details['names'])-3} autres)"
                
                print(f"  üõéÔ∏è  Services [{names_str}]: {details['total_net']:.2f}‚Ç¨ net ({proportion:.1%}) -> {montant_service:.2f}‚Ç¨ sur compte {account_id}")
            
            # R√©partition des produits
            for account_id, details in produits_details.items():
                proportion = details['total_net'] / total_ttc_final
                montant_produit = montant_paiement * proportion
                repartition['produits'][account_id] = montant_produit
                
                names_str = ', '.join(details['names'][:3])
                if len(details['names']) > 3:
                    names_str += f" (+{len(details['names'])-3} autres)"
                
                print(f"  üì¶ Produits [{names_str}]: {details['total_net']:.2f}‚Ç¨ net ({proportion:.1%}) -> {montant_produit:.2f}‚Ç¨ sur compte {account_id}")
            
            # === CALCUL DE LA TVA ===
            
            # TVA nette de la r√©servation
            tva_totale_nette = float(reservation.tax_amount or 0)
            if tva_totale_nette > 0:
                proportion_tva = tva_totale_nette / total_ttc_final
                repartition['tva'] = montant_paiement * proportion_tva
                print(f"  üßæ TVA: {tva_totale_nette:.2f}‚Ç¨ nette ({proportion_tva:.1%}) -> {repartition['tva']:.2f}‚Ç¨")
            else:
                repartition['tva'] = 0.0
                print(f"  üßæ TVA: 0.00‚Ç¨")
            
            # Total HT
            total_ht_reparti = sum(repartition['services'].values()) + sum(repartition['produits'].values())
            repartition['total_ht'] = total_ht_reparti
            
            # === V√âRIFICATION ===
            total_reparti = total_ht_reparti + repartition['tva']
            ecart = abs(total_reparti - montant_paiement)
            
            print(f"  üí∞ Total HT: {total_ht_reparti:.2f}‚Ç¨")
            print(f"  üìä Total r√©parti: {total_reparti:.2f}‚Ç¨ (√©cart: {ecart:.2f}‚Ç¨)")
            
            if ecart > 0.01:  # Plus de 1 centime d'√©cart
                print(f"  ‚ö†Ô∏è  √âcart de r√©partition d√©tect√©: {ecart:.2f}‚Ç¨")
            
            return repartition
            
        except Exception as e:
            print(f"‚ùå Erreur lors du calcul de r√©partition: {e}")
            import traceback
            traceback.print_exc()
            return {
                'services': {},
                'produits': {},
                'tva': 0.0,
                'total_ht': 0.0
            }

    def creer_ecritures_comptables_reparties(self, session, reservation, payment, repartition, compte_debit_id, compte_tva_id, journal_id):
        """
        Cr√©e les √©critures comptables r√©parties selon les comptes sp√©cifiques
        
        Args:
            session: Session de base de donn√©es
            reservation: Instance de EventReservation  
            payment: Instance de EventPayment
            repartition: R√©sultat de calculer_repartition_paiement
            compte_debit_id: Compte caisse/banque (d√©bit)
            compte_tva_id: Compte TVA collect√©e
            journal_id: Journal comptable
            
        Returns:
            list: Liste des √©critures cr√©√©es
        """
        try:
            from ayanna_erp.modules.comptabilite.model.comptabilite import ComptaEcritures as EcritureComptable, ComptaConfig
            
            ecritures = []
            libelle_base = f"Paiement R√©servation: {reservation.client_nom} {reservation.client_prenom}"
            
            # === 1. √âCRITURE DE D√âBIT (Caisse/Banque) ===
            ecriture_debit = EcritureComptable(
                journal_id=journal_id,
                compte_comptable_id=compte_debit_id,
                debit=payment.amount,
                credit=0,
                ordre=1,
                libelle=libelle_base
            )
            session.add(ecriture_debit)
            ecritures.append(ecriture_debit)
            print(f"  üì• D√©bit: {payment.amount:.2f} sur compte {compte_debit_id}")
            
            ordre = 2
            
            # === 2. √âCRITURES DE CR√âDIT POUR LES SERVICES (PROPORTIONNEL AU MONTANT BRUT) ===
            # L'utilisateur saisit le montant encaiss√©, on reconstitue la r√©partition
            montant_encaisse = payment.amount
            facteur_remise = 1 - (reservation.discount_percent / 100) if reservation.discount_percent else 1
            ttc_brut_reconstitue = montant_encaisse / facteur_remise if facteur_remise > 0 else montant_encaisse
            
            for account_id, montant_net in repartition['services'].items():
                if montant_net > 0:
                    # Calculer la part de ce compte dans le TTC brut reconstitu√©
                    proportion = montant_net / payment.amount  # Proportion du montant encaiss√©
                    montant_credit = ttc_brut_reconstitue * proportion
                    
                    ecriture_service = EcritureComptable(
                        journal_id=journal_id,
                        compte_comptable_id=account_id,
                        debit=0,
                        credit=montant_credit,
                        ordre=ordre,
                        libelle=f"{libelle_base} - Services"
                    )
                    session.add(ecriture_service)
                    ecritures.append(ecriture_service)
                    print(f"  üì§ Cr√©dit Services: {montant_credit:.2f} sur compte {account_id}")
                    ordre += 1
            
            # === 3. √âCRITURES DE CR√âDIT POUR LES PRODUITS (PROPORTIONNEL AU MONTANT BRUT) ===
            for account_id, montant_net in repartition['produits'].items():
                if montant_net > 0:
                    # Calculer la part de ce compte dans le TTC brut reconstitu√©
                    proportion = montant_net / payment.amount  # Proportion du montant encaiss√©
                    montant_credit = ttc_brut_reconstitue * proportion
                    
                    ecriture_produit = EcritureComptable(
                        journal_id=journal_id,
                        compte_comptable_id=account_id,
                        debit=0,
                        credit=montant_credit,
                        ordre=ordre,
                        libelle=f"{libelle_base} - Produits"
                    )
                    session.add(ecriture_produit)
                    ecritures.append(ecriture_produit)
                    print(f"  üì§ Cr√©dit Produits: {montant_credit:.2f} sur compte {account_id}")
                    ordre += 1
            
            # === 4. √âCRITURE DE CR√âDIT POUR LA TVA (PROPORTIONNELLE AU MONTANT BRUT) ===
            if repartition.get('tva', 0) > 0 and compte_tva_id:
                montant_tva_net = repartition['tva']
                
                # Calculer la part TVA dans le TTC brut reconstitu√©
                proportion_tva = montant_tva_net / payment.amount  # Proportion du montant encaiss√©
                montant_tva_credit = ttc_brut_reconstitue * proportion_tva
                
                ecriture_tva = EcritureComptable(
                    journal_id=journal_id,
                    compte_comptable_id=compte_tva_id,
                    debit=0,
                    credit=montant_tva_credit,
                    ordre=ordre,
                    libelle=f"{libelle_base} - TVA"
                )
                session.add(ecriture_tva)
                ecritures.append(ecriture_tva)
                print(f"  üì§ Cr√©dit TVA: {montant_tva_credit:.2f} sur compte {compte_tva_id}")
                ordre += 1
            
            # === 5. √âCRITURE DE D√âBIT POUR LA REMISE (si applicable) ===
            # LOGIQUE UTILISATEUR : L'utilisateur saisit le montant encaiss√© (net)
            # Le syst√®me reconstitue automatiquement le TTC brut et la remise
            if reservation.discount_percent and reservation.discount_percent > 0:
                # R√©cup√©rer le compte remise depuis la config
                config = session.query(ComptaConfig).first()
                if config and config.compte_remise_id:
                    # Le montant saisi par l'utilisateur est le montant NET encaiss√©
                    montant_encaisse = payment.amount
                    
                    # Reconstituer le TTC brut avant remise
                    facteur_remise = 1 - (reservation.discount_percent / 100)
                    if facteur_remise > 0:
                        ttc_brut_theorique = montant_encaisse / facteur_remise
                        remise_paiement = ttc_brut_theorique - montant_encaisse
                        
                        if remise_paiement > 0:
                            ecriture_remise = EcritureComptable(
                                journal_id=journal_id,
                                compte_comptable_id=config.compte_remise_id,
                                debit=remise_paiement,
                                credit=0,
                                ordre=ordre,
                                libelle=f"{libelle_base} - Remise {reservation.discount_percent}%"
                            )
                            session.add(ecriture_remise)
                            ecritures.append(ecriture_remise)
                            print(f"  üí≥ D√©bit Remise: {remise_paiement:.2f} sur compte {config.compte_remise_id}")
                            print(f"      Encaiss√©: {montant_encaisse:.2f}‚Ç¨ ‚Üí TTC brut reconstitu√©: {ttc_brut_theorique:.2f}‚Ç¨")
            
            return ecritures
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation des √©critures: {e}")
            import traceback
            traceback.print_exc()
            return []
            return []
