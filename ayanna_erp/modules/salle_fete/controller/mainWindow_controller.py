"""
Contr√¥leur principal pour la fen√™tre Salle de F√™te
G√®re l'initialisation de la base de donn√©es et la coordination des modules
"""

import sys
import os
from PyQt6.QtWidgets import QMessageBox
from PyQt6.QtCore import QObject, pyqtSignal

# Ajouter le chemin vers le mod√®le
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from ayanna_erp.modules.salle_fete.model.salle_fete import initialize_salle_fete_module, get_database_manager


class MainWindowController(QObject):
    """Contr√¥leur principal pour la fen√™tre Salle de F√™te"""
    
    # Signaux pour communiquer avec la vue
    initialization_completed = pyqtSignal(bool)
    database_ready = pyqtSignal()
    
    def __init__(self, parent=None, user_id=1):
        super().__init__(parent)
        self.parent_window = parent
        self.user_id = user_id
        self.pos_id = self._get_pos_for_user()
        self.is_initialized = False
        
    def _get_pos_for_user(self):
        """R√©cup√©rer l'ID du POS Salle de F√™te pour l'entreprise de l'utilisateur"""
        try:
            db_manager = get_database_manager()
            session = db_manager.get_session()
            
            # Importer les mod√®les n√©cessaires
            from ayanna_erp.database.database_manager import POSPoint, User
            
            # R√©cup√©rer l'utilisateur
            user = session.query(User).filter_by(id=self.user_id).first()
            if not user:
                print(f"‚ùå Utilisateur avec ID {self.user_id} non trouv√©")
                db_manager.close_session()
                return 1  # Valeur par d√©faut
            
            # Chercher le POS du module Salle de F√™te (module_id=1) pour cette entreprise
            pos = session.query(POSPoint).filter_by(
                enterprise_id=user.enterprise_id,
                module_id=1  # Module Salle de F√™te
            ).first()
            
            if pos:
                print(f"‚úÖ POS trouv√© pour l'entreprise: {pos.name} (ID: {pos.id})")
                db_manager.close_session()
                return pos.id
            else:
                print(f"‚ùå Aucun POS Salle de F√™te trouv√© pour l'entreprise {user.enterprise_id}")
                db_manager.close_session()
                return 1  # Valeur par d√©faut
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la recherche du POS: {e}")
            try:
                db_manager.close_session()
            except:
                pass
            return 1  # Valeur par d√©faut
        
    def set_pos_id(self, pos_id):
        """D√©finir l'ID du POS"""
        self.pos_id = pos_id
        
    def initialize_module(self):
        """
        Initialiser le module Salle de F√™te
        √Ä appeler au premier acc√®s √† la fen√™tre
        """
        if self.is_initialized:
            self.database_ready.emit()
            return True
            
        try:
            # V√©rifier d'abord si le module est d√©j√† initialis√© dans la base de donn√©es
            from ayanna_erp.modules.salle_fete.model.salle_fete import EventService, get_database_manager
            
            db_manager = get_database_manager()
            session = db_manager.get_session()
            existing_services = session.query(EventService).filter(EventService.pos_id == self.pos_id).first()
            db_manager.close_session()
            
            # Si les donn√©es existent d√©j√†, pas besoin d'afficher la popup
            is_first_time = existing_services is None
            
            print("üé™ Initialisation du module Salle de F√™te...")
            
            # Initialiser les tables et donn√©es
            success = initialize_salle_fete_module(self.pos_id)
            
            if success:
                self.is_initialized = True
                print("‚úÖ Module Salle de F√™te initialis√© avec succ√®s")
                self.initialization_completed.emit(True)
                self.database_ready.emit()
                
                # Afficher un message de confirmation SEULEMENT si c'est la premi√®re fois
                if is_first_time and self.parent_window:
                    QMessageBox.information(
                        self.parent_window,
                        "Initialisation r√©ussie",
                        "Le module Salle de F√™te a √©t√© initialis√© avec succ√®s !\n\n"
                        "‚úÖ Base de donn√©es cr√©√©e\n"
                        "‚úÖ Tables initialis√©es\n"
                        "‚úÖ Donn√©es d'exemple ajout√©es"
                    )
                return True
            else:
                print("‚ùå √âchec de l'initialisation")
                self.initialization_completed.emit(False)
                
                if self.parent_window:
                    QMessageBox.critical(
                        self.parent_window,
                        "Erreur d'initialisation",
                        "Impossible d'initialiser le module Salle de F√™te.\n"
                        "Veuillez v√©rifier les permissions et r√©essayer."
                    )
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'initialisation: {e}")
            self.initialization_completed.emit(False)
            
            if self.parent_window:
                QMessageBox.critical(
                    self.parent_window,
                    "Erreur critique",
                    f"Une erreur s'est produite lors de l'initialisation :\n{str(e)}"
                )
            return False
    
    def initialize_database(self):
        """Initialiser la base de donn√©es (alias pour initialize_module)"""
        return self.initialize_module()
            
    def check_database_connection(self):
        """V√©rifier la connexion √† la base de donn√©es"""
        try:
            db_manager = get_database_manager()
            session = db_manager.get_session()
            if session:
                db_manager.close_session()
                return True
            return False
        except Exception as e:
            print(f"‚ùå Erreur de connexion BDD: {e}")
            return False
            
    def get_database_instance(self):
        """Retourner l'instance de la base de donn√©es"""
        return get_database_manager()
        
    def cleanup(self):
        """Nettoyer les ressources au moment de la fermeture"""
        try:
            db_manager = get_database_manager()
            db_manager.close_session()
            print("üßπ Ressources nettoy√©es")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du nettoyage: {e}")