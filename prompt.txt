Génère un projet ERP desktop appelé "Ayanna ERP" en Python avec PyQt6. 
Le projet doit respecter le cahier des charges suivant :

1. Objectifs de l’application :
- Gestion intégrée de Salle de Fête, Boutique/Pharmacie, Hôtel, Restaurant/Bar, Achats et Stock.
- Chaque module possède un Point de Vente (POS) propre.
- Intégration de la comptabilité SYSCOHADA pour les transactions financières.
- Interface utilisateur : 
  * Fenêtre d'authentification (connexion par email et mot de passe).
  * Main Windows avec une grille ou cases pour accéder à tous les modules.
  * Chaque module ouvre un POS spécifique avec onglets pour gérer produits, services, commandes, salles, tables, clients et paiements.
  * Configuration des moyens de paiement par module (Espèces et Compte client par défaut).

2. Modules et logique métier :
- **Salle de Fête** : gestion des services (nom, description, coût, prix), produits, réservations avec services et produits associés, paiements, génération automatique d’écritures comptables.
- **Boutique / Pharmacie** : gestion des produits et services, ventes via POS avec panier, impression proforma, sélection client, paiements, écritures comptables.
- **Hôtel** : gestion des chambres (numéro, type, capacité, prix), réservations avec check-in/out, services additionnels, paiements et écritures comptables.
- **Restaurant / Bar (POS Bar)** : configuration des salles et tables (forme, position x/y, capacité), commandes associées à tables ou ventes directes, paiements, écritures comptables.
- **Achats** : commandes fournisseurs, réception des produits, ajout automatique au stock, génération d’écritures comptables.
- **Stock / Inventaire** : suivi des mouvements (entrée, sortie, ajustement) pour tous les modules, calcul des niveaux disponibles, alertes de stock faible, intégration comptable.
- **Comptabilité (SYSCOHADA)** : gestion des classes et comptes comptables, journal comptable, écritures comptables (débit/crédit).

3. Tables SQL principales :
- **Communes** : core_enterprises, core_users, core_partners, core_pos_points
- **Salle de Fête** : event_services, event_products, event_reservations, event_reservation_services, event_reservation_products, event_payments
- **Boutique / Pharmacie** : shop_products, shop_services, shop_sales, shop_sale_lines_products, shop_sale_lines_services, shop_payments
- **Hôtel** : hotel_rooms, hotel_reservations, hotel_reservation_rooms, hotel_reservation_services, hotel_payments
- **Restaurant / Bar** : bar_salles, bar_tables, bar_orders, bar_order_products, bar_order_services, bar_payments
- **Achats** : purchase_orders, purchase_order_lines
- **Stock / Inventaire** : stock_moves, stock_levels
- **Comptabilité** : classes_comptables, comptes_comptables, journal_comptables, ecritures_comptables
- **Moyens de paiement** : module_payment_methods (Espèces et Compte client par défaut)

4. Relations et intégrations :
- Chaque module peut générer des écritures comptables si la comptabilité est activée.
- Chaque vente, réservation, commande → paiement → écritures comptables.
- Tous les mouvements de produits/services → module Stock pour suivi des stocks.
- Les produits et services sont liés à des comptes comptables et aux POS correspondants.

5. UI :
- Authentification via email et mot de passe.
- Main Windows : vue sous forme de cases ou grille avec modules disponibles.
- Chaque module ouvre un POS avec onglets pour :
  * Gestion des produits/services
  * Gestion des clients
  * Gestion des commandes / réservations
  * Gestion des salles et tables pour les restaurants/bar
  * Paiements et facturation
  * Reporting et statistiques

6. Comportement par défaut :
- Les moyens de paiement Espèces et Compte client sont créés par défaut et ne peuvent pas être supprimés.
- Les modules peuvent être utilisés indépendamment ou reliés à la comptabilité.

Génère un projet respectant ce cahier des charges, avec les tables SQL, la logique métier de chaque module, les relations entre modules, et les éléments d’UI pour le développement en PyQt6.

voici les tables 

-- ====================================================
-- CORE TABLES
-- ====================================================
CREATE TABLE core_enterprises (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    address TEXT,
    phone TEXT,
    email TEXT,
    rccm Text,
    id_nat,
    logo, path..
    slogan TEXT,
    currency TEXT DEFAULT 'USD',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE core_users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    enterprise_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    password TEXT NOT NULL,
    role TEXT DEFAULT 'admin',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(enterprise_id) REFERENCES core_enterprises(id)
);

CREATE TABLE core_partners (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    enterprise_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    email TEXT,
    phone TEXT,
    address TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(enterprise_id) REFERENCES core_enterprises(id)
);

-- Table des modules disponibles
CREATE TABLE modules (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE, -- SalleFete, Boutique, Pharmacie, Restaurant, Hotel, Achat, Stock
    description TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Table des points de vente avec module comme clé étrangère
CREATE TABLE core_pos_points (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    enterprise_id INTEGER NOT NULL,
    module_id INTEGER NOT NULL,  -- référence à la table modules
    name TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(enterprise_id) REFERENCES core_enterprises(id),
    FOREIGN KEY(module_id) REFERENCES modules(id)
);
-- ====================================================
-- COMPTABILITÉ
-- ====================================================
CREATE TABLE classes_comptables (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    code = Column(String(10), nullable=True)
    nom = Column(String(100), nullable=False)  # Nom court ou code de la classe
    libelle = Column(String(255), nullable=False)
    type = Column(String(20), nullable=False)  # actif, passif, charge, produit
    entreprise_id = Column(Integer, nullable=False)
    document = Column(String(255))  # bilan ou resultat
);

CREATE TABLE comptes_comptables (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    code = Column(String(20), nullable=False)
    nom = Column(String(255), nullable=False)
    libelle = Column(String(255), nullable=False)
    classe_comptable_id = Column(Integer, ForeignKey('classes_comptables.id'), nullable=False)
    # entreprise_id supprimé, accès via classe_comptable. Plus de relation directe avec Entreprise.
    classe_comptable = relationship("ClasseComptable", back_populates="comptes")
    ecritures = relationship("EcritureComptable", back_populates="compte_comptable")
);

CREATE TABLE journal_comptables (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    libelle = Column(String(255), nullable=False)
    montant = Column(Numeric(15, 2), nullable=False)
    type_operation = Column(String(20), nullable=False)  # paiement, depense, transfert
    entreprise_id = Column(Integer, ForeignKey('entreprises.id'), nullable=False)
    entreprise = relationship("Entreprise")
    ecritures = relationship("EcritureComptable", back_populates="journal")
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE ecritures_comptables (
    journal_id = Column(Integer, ForeignKey('journaux_comptables.id'), nullable=False)
    compte_comptable_id = Column(Integer, ForeignKey('comptes_comptables.id'), nullable=False)
    debit = Column(Numeric(15, 2), default=0)
    credit = Column(Numeric(15, 2), default=0)
    ordre = Column(Integer, nullable=False)  # 1 pour débit, 2 pour crédit
    created_at = Column(DateTime, nullable=False, default=datetime.utcnow)
    journal = relationship("JournalComptable", back_populates="ecritures")
    compte_comptable = relationship("CompteComptable", back_populates="ecritures")
);

-- ====================================================
-- MOYENS DE PAIEMENT
-- ====================================================
CREATE TABLE module_payment_methods (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    module_id INTEGER NOT NULL,        -- référence à modules
    pos_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    account_id INTEGER,
    is_default INTEGER DEFAULT 0,
    is_active INTEGER DEFAULT 1,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(module_id) REFERENCES modules(id),
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id),
    FOREIGN KEY(account_id) REFERENCES comptes_comptables(id)
);

-- ====================================================
-- MODULE SALLE DE FÊTE
-- ====================================================
CREATE TABLE event_services (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pos_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    cost REAL DEFAULT 0.0,
    price REAL DEFAULT 0.0,
    account_id INTEGER,
    is_active INTEGER DEFAULT 1,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id),
    FOREIGN KEY(account_id) REFERENCES comptes_comptables(id)
);

CREATE TABLE event_products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pos_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    cost REAL DEFAULT 0.0,
    price_unit REAL DEFAULT 0.0,
    stock_quantity REAL DEFAULT 0.0,
    account_id INTEGER,
    is_active INTEGER DEFAULT 1,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id),
    FOREIGN KEY(account_id) REFERENCES comptes_comptables(id)
);

CREATE TABLE event_reservations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pos_id INTEGER NOT NULL,
    partner_id INTEGER,
    reference TEXT,
    event_date DATETIME NOT NULL,
    status TEXT DEFAULT 'draft',
    total_services REAL DEFAULT 0.0,
    total_products REAL DEFAULT 0.0,
    total_amount REAL DEFAULT 0.0,
    total_cost REAL DEFAULT 0.0,
    created_by INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    closed_at DATETIME,
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id),
    FOREIGN KEY(partner_id) REFERENCES core_partners(id),
    FOREIGN KEY(created_by) REFERENCES core_users(id)
);

CREATE TABLE event_reservation_services (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    reservation_id INTEGER NOT NULL,
    service_id INTEGER NOT NULL,
    quantity INTEGER DEFAULT 1,
    line_total REAL DEFAULT 0.0,
    line_cost REAL DEFAULT 0.0,
    FOREIGN KEY(reservation_id) REFERENCES event_reservations(id) ON DELETE CASCADE,
    FOREIGN KEY(service_id) REFERENCES event_services(id)
);

CREATE TABLE event_reservation_products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    reservation_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    quantity INTEGER DEFAULT 1,
    line_total REAL DEFAULT 0.0,
    line_cost REAL DEFAULT 0.0,
    FOREIGN KEY(reservation_id) REFERENCES event_reservations(id) ON DELETE CASCADE,
    FOREIGN KEY(product_id) REFERENCES event_products(id)
);

CREATE TABLE event_payments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    reservation_id INTEGER NOT NULL,
    payment_method_id INTEGER NOT NULL,
    amount REAL NOT NULL,
    payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    journal_id INTEGER,
    FOREIGN KEY(payment_method_id) REFERENCES module_payment_methods(id),
    FOREIGN KEY(journal_id) REFERENCES journal_comptables(id)
);

-- ====================================================
-- MODULE BOUTIQUE / PHARMACIE
-- ====================================================
CREATE TABLE shop_products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pos_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    image TEXT,
    cost REAL DEFAULT 0.0,
    price_unit REAL DEFAULT 0.0,
    stock_quantity REAL DEFAULT 0.0,
    account_id INTEGER,
    categorie_id INTEGER,
    is_active INTEGER DEFAULT 1,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id),
    FOREIGN KEY (category_id) REFERENCES shop_product_categories(id),
    FOREIGN KEY(account_id) REFERENCES comptes_comptables(id)
);

CREATE TABLE shop_services (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pos_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    cost REAL DEFAULT 0.0,
    price REAL DEFAULT 0.0,
    account_id INTEGER,
    is_active INTEGER DEFAULT 1,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id),
    FOREIGN KEY(account_id) REFERENCES comptes_comptables(id)
);

CREATE TABLE shop_sales (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pos_id INTEGER NOT NULL,
    partner_id INTEGER,
    reference TEXT,
    status TEXT DEFAULT 'draft',
    total_services REAL DEFAULT 0.0,
    total_products REAL DEFAULT 0.0,
    total_amount REAL DEFAULT 0.0,
    total_cost REAL DEFAULT 0.0,
    created_by INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    closed_at DATETIME,
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id),
    FOREIGN KEY(partner_id) REFERENCES core_partners(id),
    FOREIGN KEY(created_by) REFERENCES core_users(id)
);
CREATE TABLE shop_product_categories (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pos_id INTEGER NOT NULL,        -- référence au POS
    name TEXT NOT NULL,             -- nom de la catégorie
    description TEXT,               -- optionnel
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id)
);

CREATE TABLE shop_sale_lines_products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    sale_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    image TEXT,
    quantity INTEGER DEFAULT 1,
    line_total REAL DEFAULT 0.0,
    line_cost REAL DEFAULT 0.0,
    FOREIGN KEY(sale_id) REFERENCES shop_sales(id) ON DELETE CASCADE,
    FOREIGN KEY(product_id) REFERENCES shop_products(id)
);

CREATE TABLE shop_sale_lines_services (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    sale_id INTEGER NOT NULL,
    service_id INTEGER NOT NULL,
    quantity INTEGER DEFAULT 1,
    line_total REAL DEFAULT 0.0,
    line_cost REAL DEFAULT 0.0,
    FOREIGN KEY(sale_id) REFERENCES shop_sales(id) ON DELETE CASCADE,
    FOREIGN KEY (category_id) REFERENCES shop_product_categories(id);
    FOREIGN KEY(service_id) REFERENCES shop_services(id)
);

CREATE TABLE shop_payments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    sale_id INTEGER NOT NULL,
    payment_method_id INTEGER NOT NULL,
    amount REAL NOT NULL,
    payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    journal_id INTEGER,
    FOREIGN KEY(payment_method_id) REFERENCES module_payment_methods(id),
    FOREIGN KEY(journal_id) REFERENCES journal_comptables(id)
);

-- ====================================================
-- MODULE HÔTEL
-- ====================================================
CREATE TABLE hotel_rooms (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pos_id INTEGER NOT NULL,
    room_number TEXT NOT NULL,
    room_type TEXT,
    capacity INTEGER DEFAULT 1,
    price_per_night REAL DEFAULT 0.0,
    cost_per_night REAL DEFAULT 0.0,
    status TEXT DEFAULT 'available',
    account_id INTEGER,
    is_active INTEGER DEFAULT 1,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id),
    FOREIGN KEY(account_id) REFERENCES comptes_comptables(id)
);

CREATE TABLE hotel_reservations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pos_id INTEGER NOT NULL,
    partner_id INTEGER,
    reference TEXT,
    check_in_date DATETIME NOT NULL,
    check_out_date DATETIME NOT NULL,
    status TEXT DEFAULT 'draft',
    total_room_amount REAL DEFAULT 0.0,
    total_services_amount REAL DEFAULT 0.0,
    total_amount REAL DEFAULT 0.0,
    total_cost REAL DEFAULT 0.0,
    created_by INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    closed_at DATETIME,
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id),
    FOREIGN KEY(partner_id) REFERENCES core_partners(id),
    FOREIGN KEY(created_by) REFERENCES core_users(id)
);

CREATE TABLE hotel_reservation_rooms (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    reservation_id INTEGER NOT NULL,
    room_id INTEGER NOT NULL,
    nights INTEGER DEFAULT 1,
    line_total REAL DEFAULT 0.0,
    line_cost REAL DEFAULT 0.0,
    FOREIGN KEY(reservation_id) REFERENCES hotel_reservations(id) ON DELETE CASCADE,
    FOREIGN KEY(room_id) REFERENCES hotel_rooms(id)
);

CREATE TABLE hotel_reservation_services (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    reservation_id INTEGER NOT NULL,
    service_id INTEGER NOT NULL,
    quantity INTEGER DEFAULT 1,
    line_total REAL DEFAULT 0.0,
    line_cost REAL DEFAULT 0.0,
    account_id INTEGER,
    FOREIGN KEY(reservation_id) REFERENCES hotel_reservations(id) ON DELETE CASCADE,
    FOREIGN KEY(service_id) REFERENCES event_services(id),
    FOREIGN KEY(account_id) REFERENCES comptes_comptables(id)
);

CREATE TABLE hotel_payments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    reservation_id INTEGER NOT NULL,
    payment_method_id INTEGER NOT NULL,
    amount REAL NOT NULL,
    payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    journal_id INTEGER,
    FOREIGN KEY(payment_method_id) REFERENCES module_payment_methods(id),
    FOREIGN KEY(journal_id) REFERENCES journal_comptables(id)
);

-- ====================================================
-- MODULE RESTAURANT / BAR (POS Bar)
-- ====================================================
CREATE TABLE bar_salles (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pos_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id)
);

CREATE TABLE bar_tables (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    salle_id INTEGER NOT NULL,
    table_number TEXT NOT NULL,
    shape TEXT DEFAULT 'rectangular',
    position_x REAL DEFAULT 0.0,
    position_y REAL DEFAULT 0.0,
    size INTEGER DEFAULT 4,
    status TEXT DEFAULT 'free',
    account_id INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(salle_id) REFERENCES bar_salles(id),
    FOREIGN KEY(account_id) REFERENCES comptes_comptables(id)
);

CREATE TABLE bar_orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pos_id INTEGER NOT NULL,
    table_id INTEGER,
    partner_id INTEGER,
    reference TEXT,
    status TEXT DEFAULT 'draft',
    total_products REAL DEFAULT 0.0,
    total_services REAL DEFAULT 0.0,
    total_amount REAL DEFAULT 0.0,
    total_cost REAL DEFAULT 0.0,
    created_by INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    closed_at DATETIME,
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id),
    FOREIGN KEY(table_id) REFERENCES bar_tables(id),
    FOREIGN KEY(partner_id) REFERENCES core_partners(id),
    FOREIGN KEY(created_by) REFERENCES core_users(id)
);

CREATE TABLE bar_product_categories (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pos_id INTEGER NOT NULL,        -- référence au POS
    name TEXT NOT NULL,             -- nom de la catégorie
    description TEXT,               -- optionnel
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id)
);

CREATE TABLE bar_order_products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    quantity INTEGER DEFAULT 1,
    line_total REAL DEFAULT 0.0,
    image TEXT,
    line_cost REAL DEFAULT 0.0,
    account_id INTEGER,
    categorie_id INTEGER,
    FOREIGN KEY(order_id) REFERENCES bar_orders(id) ON DELETE CASCADE,
    FOREIGN KEY(product_id) REFERENCES shop_products(id),
    OREIGN KEY (category_id) REFERENCES bar_product_categories(id),
    FOREIGN KEY(account_id) REFERENCES comptes_comptables(id)
);

CREATE TABLE bar_order_services (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id INTEGER NOT NULL,
    service_id INTEGER NOT NULL,
    quantity INTEGER DEFAULT 1,
    line_total REAL DEFAULT 0.0,
    line_cost REAL DEFAULT 0.0,
    account_id INTEGER,
    FOREIGN KEY(order_id) REFERENCES bar_orders(id) ON DELETE CASCADE,
    FOREIGN KEY(service_id) REFERENCES shop_services(id),
    FOREIGN KEY(account_id) REFERENCES comptes_comptables(id)
);

CREATE TABLE bar_payments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id INTEGER NOT NULL,
    payment_method_id INTEGER NOT NULL,
    amount REAL NOT NULL,
    payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    journal_id INTEGER,
    FOREIGN KEY(payment_method_id) REFERENCES module_payment_methods(id),
    FOREIGN KEY(journal_id) REFERENCES journal_comptables(id)
);

-- ====================================================
-- MODULE ACHATS
-- ====================================================
CREATE TABLE purchase_orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    pos_id INTEGER NOT NULL,
    partner_id INTEGER, -- fournisseur
    reference TEXT,
    status TEXT DEFAULT 'draft',
    total_amount REAL DEFAULT 0.0,
    created_by INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    received_at DATETIME,
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id),
    FOREIGN KEY(partner_id) REFERENCES core_partners(id),
    FOREIGN KEY(created_by) REFERENCES core_users(id)
);

CREATE TABLE purchase_order_lines (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    quantity REAL DEFAULT 1.0,
    unit_cost REAL DEFAULT 0.0,
    line_total REAL DEFAULT 0.0,
    FOREIGN KEY(order_id) REFERENCES purchase_orders(id) ON DELETE CASCADE,
    FOREIGN KEY(product_id) REFERENCES shop_products(id)
);

-- ====================================================
-- MODULE STOCK / INVENTAIRE
-- ====================================================
CREATE TABLE stock_moves (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    product_id INTEGER NOT NULL,
    module_id INTEGER NOT NULL,        -- référence à modules
    pos_id INTEGER NOT NULL,
    move_type TEXT NOT NULL,           -- 'in', 'out', 'adjustment'
    quantity REAL DEFAULT 0.0,
    cost REAL DEFAULT 0.0,
    reference TEXT,                    -- numéro de commande, vente ou réservation
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(product_id) REFERENCES shop_products(id),
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id),
    FOREIGN KEY(module_id) REFERENCES modules(id)
);

CREATE TABLE stock_levels (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    product_id INTEGER NOT NULL,
    pos_id INTEGER NOT NULL,
    quantity REAL DEFAULT 0.0,
    reserved REAL DEFAULT 0.0,
    available AS (quantity - reserved),
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(product_id) REFERENCES shop_products(id),
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id)
);

-- ====================================================
-- MODULE DEPENSES PAR POS
-- ====================================================
CREATE TABLE module_expenses (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    module_id INTEGER NOT NULL,         -- référence à la table modules
    pos_id INTEGER NOT NULL,            -- référence au POS
    account_id INTEGER NOT NULL,        -- compte comptable à créditer
    libelle TEXT NOT NULL,              -- description de la dépense
    amount REAL NOT NULL,               -- montant de la dépense
    expense_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by INTEGER,                 -- utilisateur qui a enregistré la dépense
    journal_id INTEGER,                 -- journal comptable associé
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(module_id) REFERENCES modules(id),
    FOREIGN KEY(pos_id) REFERENCES core_pos_points(id),
    FOREIGN KEY(account_id) REFERENCES comptes_comptables(id),
    FOREIGN KEY(created_by) REFERENCES core_users(id),
    FOREIGN KEY(journal_id) REFERENCES journal_comptables(id)
);

