"""
Test des nouvelles corrections des erreurs
"""

import sys
import os

# Ajouter le chemin racine au PYTHONPATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_shopproduct_cost_price():
    """Test de l'attribut cost_price dans ShopProduct"""
    try:
        print("üîÑ Test de l'attribut 'cost_price' dans ShopProduct...")
        
        from ayanna_erp.modules.boutique.model.models import ShopProduct
        
        if hasattr(ShopProduct, 'cost_price'):
            print("   ‚úÖ Attribut 'cost_price' trouv√©")
            return True
        else:
            print("   ‚ùå Attribut 'cost_price' manquant")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test cost_price: {e}")
        return False

def test_alerte_controller_limit():
    """Test du param√®tre limit dans get_all_alerts"""
    try:
        print("\nüîÑ Test du param√®tre 'limit' dans AlerteController.get_all_alerts...")
        
        from ayanna_erp.modules.stock.controllers.alerte_controller import AlerteController
        import inspect
        
        controller = AlerteController(pos_id=1)
        
        # V√©rifier la signature de la m√©thode
        sig = inspect.signature(controller.get_all_alerts)
        
        if 'limit' in sig.parameters:
            print("   ‚úÖ Param√®tre 'limit' trouv√© dans la signature")
            print(f"   üìã Signature: {sig}")
            return True
        else:
            print("   ‚ùå Param√®tre 'limit' manquant")
            print(f"   üìã Signature actuelle: {sig}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test limit: {e}")
        return False

def test_controllers_instantiation():
    """Test d'instanciation des contr√¥leurs avec les nouvelles corrections"""
    try:
        print("\nüîß Test d'instanciation des contr√¥leurs corrig√©s...")
        
        from ayanna_erp.modules.stock.controllers.stock_controller import StockController
        from ayanna_erp.modules.stock.controllers.alerte_controller import AlerteController
        from ayanna_erp.modules.stock.controllers.transfert_controller import TransfertController
        
        # Test d'instanciation
        controllers = {
            'StockController': StockController(pos_id=1),
            'AlerteController': AlerteController(pos_id=1),
            'TransfertController': TransfertController(pos_id=1)
        }
        
        for name, controller in controllers.items():
            print(f"   ‚úÖ {name} instanci√© avec succ√®s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur instanciation contr√¥leurs: {e}")
        return False

def test_imports_completeness():
    """Test complet de tous les imports n√©cessaires"""
    try:
        print("\nüì¶ Test d'import complet...")
        
        # Mod√®les
        from ayanna_erp.modules.boutique.model.models import (
            ShopProduct, ShopStockTransfer, ShopWarehouse, 
            ShopWarehouseStock, ShopStockMovement
        )
        print("   ‚úÖ Tous les mod√®les import√©s")
        
        # Contr√¥leurs
        from ayanna_erp.modules.stock.controllers.stock_controller import StockController
        from ayanna_erp.modules.stock.controllers.alerte_controller import AlerteController
        from ayanna_erp.modules.stock.controllers.transfert_controller import TransfertController
        from ayanna_erp.modules.stock.controllers.inventaire_controller import InventaireController
        from ayanna_erp.modules.stock.controllers.rapport_controller import RapportController
        print("   ‚úÖ Tous les contr√¥leurs import√©s")
        
        # Widgets (imports seulement)
        from ayanna_erp.modules.stock.views.modular_stock_widget import ModularStockManagementWidget
        from ayanna_erp.modules.stock.stock_window import StockWindow
        print("   ‚úÖ Tous les widgets import√©s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur imports: {e}")
        return False

def main():
    """Fonction principale"""
    print("üîß TEST DES NOUVELLES CORRECTIONS")
    print("=" * 60)
    
    all_tests_passed = True
    tests = [
        test_shopproduct_cost_price,
        test_alerte_controller_limit,
        test_controllers_instantiation,
        test_imports_completeness
    ]
    
    for test_func in tests:
        if not test_func():
            all_tests_passed = False
    
    print("\n" + "=" * 60)
    if all_tests_passed:
        print("üéâ TOUTES LES NOUVELLES CORRECTIONS R√âUSSIES!")
        print("")
        print("‚úÖ Corrections appliqu√©es:")
        print("   ‚Ä¢ ShopProduct.cost_price ajout√©")
        print("   ‚Ä¢ AlerteController.get_all_alerts supporte 'limit'")
        print("   ‚Ä¢ R√©f√©rences √† created_at temporairement comment√©es")
        print("   ‚Ä¢ Utilisation de requested_date pour les tri/filtres")
        print("")
        print("‚ö†Ô∏è Actions restantes:")
        print("   ‚Ä¢ Ex√©cuter la migration DB pour ajouter les colonnes manquantes")
        print("   ‚Ä¢ Ou cr√©er les colonnes manuellement en SQL")
        print("")
        print("üöÄ Le module Stock devrait maintenant fonctionner!")
        
    else:
        print("‚ùå CERTAINES CORRECTIONS ONT √âCHOU√â")
        print("‚ö†Ô∏è  V√©rifiez les erreurs ci-dessus")
    
    print("=" * 60)

if __name__ == "__main__":
    main()