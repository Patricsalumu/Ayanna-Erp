"""
Test de l'architecture centralis√©e des produits
"""

import os
import sys

# Ajouter le chemin vers le projet
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ayanna_erp.database.database_manager import DatabaseManager

def test_centralized_architecture():
    """Test de l'architecture centralis√©e des contr√¥leurs de produits"""
    
    print("=== Test de l'architecture centralis√©e des produits ===\n")
    
    try:
        # Test 1: Import des contr√¥leurs centralis√©s
        print("1. Test des imports des contr√¥leurs...")
        
        from ayanna_erp.modules.core.controllers.product_controller import CoreProductController
        print("‚úì CoreProductController import√© avec succ√®s")
        
        from ayanna_erp.modules.boutique.controller.produit_controller import ProduitController as BoutiqueProduitController
        print("‚úì BoutiqueProduitController import√© avec succ√®s")
        
        from ayanna_erp.modules.salle_fete.controller.produit_controller import ProduitController as SalleFeteProduitController
        print("‚úì SalleFeteProduitController import√© avec succ√®s")
        
        # Test 2: V√©rification de l'h√©ritage
        print("\n2. V√©rification de l'h√©ritage...")
        
        boutique_ctrl = BoutiqueProduitController(2)  # POS_ID 2 pour boutique
        print("‚úì BoutiqueProduitController instanci√© (POS_ID: 2)")
        
        salle_fete_ctrl = SalleFeteProduitController(1)  # POS_ID 1 pour salle de f√™te
        print("‚úì SalleFeteProduitController instanci√© (POS_ID: 1)")
        
        # V√©rifier que les m√©thodes h√©rit√©es sont disponibles
        assert hasattr(boutique_ctrl, 'get_products'), "M√©thode get_products manquante"
        assert hasattr(boutique_ctrl, 'create_product'), "M√©thode create_product manquante"
        assert hasattr(boutique_ctrl, 'get_categories'), "M√©thode get_categories manquante"
        
        assert hasattr(salle_fete_ctrl, 'get_products'), "M√©thode get_products manquante"
        assert hasattr(salle_fete_ctrl, 'create_product'), "M√©thode create_product manquante"
        assert hasattr(salle_fete_ctrl, 'get_categories'), "M√©thode get_categories manquante"
        
        print("‚úì Toutes les m√©thodes h√©rit√©es sont disponibles")
        
        # Test 3: Test des entrep√¥ts sp√©cifiques
        print("\n3. Test de la configuration des entrep√¥ts...")
        
        # Cr√©er une session pour tester les m√©thodes
        db_manager = DatabaseManager()
        session = db_manager.get_session()
        
        try:
            # Test des cat√©gories
            boutique_categories = boutique_ctrl.get_categories(session)
            salle_fete_categories = salle_fete_ctrl.get_categories(session)
            
            print(f"‚úì Boutique: {len(boutique_categories)} cat√©gories trouv√©es")
            print(f"‚úì Salle de f√™te: {len(salle_fete_categories)} cat√©gories trouv√©es")
            
            # Test des produits
            boutique_products = boutique_ctrl.get_products(session)
            salle_fete_products = salle_fete_ctrl.get_products(session)
            
            print(f"‚úì Boutique: {len(boutique_products)} produits trouv√©s")
            print(f"‚úì Salle de f√™te: {len(salle_fete_products)} produits trouv√©s")
            
        finally:
            session.close()
        
        print("\n4. Test des informations de stock...")
        
        # Test des m√©thodes sp√©cifiques aux modules
        if len(boutique_products) > 0:
            product_id = boutique_products[0].id
            stock_info = boutique_ctrl.get_product_stock_info(product_id)
            print(f"‚úì Boutique stock info pour produit {product_id}: {stock_info}")
        
        if len(salle_fete_products) > 0:
            product_id = salle_fete_products[0].id
            stock_info = salle_fete_ctrl.get_product_stock_info(product_id)
            print(f"‚úì Salle de f√™te stock info pour produit {product_id}: {stock_info}")
        
        print("\n=== TOUS LES TESTS ONT R√âUSSI ===")
        print("L'architecture centralis√©e fonctionne correctement !")
        print("- Les contr√¥leurs h√©ritent du CoreProductController")
        print("- Chaque module utilise son entrep√¥t POS sp√©cifique")
        print("- Les m√©thodes centralis√©es sont disponibles")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_centralized_architecture()
    if success:
        print("\nüéâ Architecture centralis√©e valid√©e avec succ√®s !")
    else:
        print("\nüí• √âchec de la validation de l'architecture centralis√©e")
        sys.exit(1)