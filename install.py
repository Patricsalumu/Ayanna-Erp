#!/usr/bin/env python3
"""
Script d'installation et de configuration pour Ayanna ERP
"""

import os
import sys
import subprocess
import hashlib
from pathlib import Path


def check_python_version():
    """V√©rifie que Python 3.8+ est install√©"""
    if sys.version_info < (3, 8):
        print(f"‚ùå Python 3.8+ requis. Version actuelle: {sys.version}")
        return False
    print(f"‚ÑπÔ∏è  Python d√©tect√©: {sys.version.split()[0]}")
    return True


def create_virtual_environment():
    """Cr√©e un environnement virtuel si n√©cessaire"""
    venv_path = Path("venv")
    
    if venv_path.exists():
        print("‚ÑπÔ∏è  Environnement virtuel d√©tect√©")
        return True
    
    print("‚ÑπÔ∏è  Cr√©ation de l'environnement virtuel...")
    try:
        subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
        print("‚úÖ Environnement virtuel cr√©√©")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'environnement virtuel: {e}")
        return False


def get_python_executable():
    """Retourne le chemin vers l'ex√©cutable Python (venv ou syst√®me)"""
    venv_python = Path("venv/bin/python")
    if venv_python.exists():
        return str(venv_python)
    return sys.executable


def install_dependencies():
    """Installer les d√©pendances Python"""
    print("Installation des d√©pendances...")
    
    # Cr√©er l'environnement virtuel si n√©cessaire
    if not create_virtual_environment():
        return False
    
    python_exec = get_python_executable()
    
    dependencies = [
        "PyQt6>=6.5.0",
        "SQLAlchemy>=2.0.0",
        "bcrypt>=4.0.0",
        "reportlab>=4.0.0",
        "Pillow>=10.0.0",
        "python-dotenv>=1.0.0"
    ]
    
    for dep in dependencies:
        print(f"Installation de {dep}...")
        try:
            subprocess.check_call([python_exec, "-m", "pip", "install", dep])
            print(f"‚úÖ {dep} install√© avec succ√®s")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de l'installation de {dep}: {e}")
            return False
    
    return True


def create_database():
    """Cr√©er et initialiser la base de donn√©es"""
    print("Cr√©ation de la base de donn√©es...")
    
    try:
        # Ajouter le r√©pertoire courant au PYTHONPATH
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
        
        # Si on utilise un environnement virtuel, s'assurer qu'il est activ√©
        python_exec = get_python_executable()
        if "venv" in python_exec:
            # Mettre √† jour le PATH pour utiliser les modules du venv
            venv_site_packages = Path("venv/lib").glob("python*/site-packages")
            for site_pkg in venv_site_packages:
                sys.path.insert(0, str(site_pkg))
        
        from ayanna_erp.database.database_manager import DatabaseManager
        
        db_manager = DatabaseManager()
        if db_manager.initialize_database():
            print("‚úÖ Base de donn√©es cr√©√©e et initialis√©e avec succ√®s")
            return True
        else:
            print("‚ùå Erreur lors de la cr√©ation de la base de donn√©es")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la base de donn√©es: {e}")
        return False


def create_default_admin():
    """Cr√©er un utilisateur administrateur par d√©faut"""
    print("Cr√©ation de l'utilisateur administrateur par d√©faut...")
    
    try:
        from ayanna_erp.database.database_manager import DatabaseManager, User, Entreprise
        
        db_manager = DatabaseManager()
        session = db_manager.get_session()
        
        # V√©rifier si une entreprise existe d√©j√†
        existing_enterprise = session.query(Entreprise).first()
        if not existing_enterprise:
            # Cr√©er une entreprise par d√©faut
            enterprise = Entreprise(
                name="Ayanna Solutions",
                address="123 Rue Exemple",
                phone="+243 123 456 789",
                email="contact@ayanna-solutions.com",
                slogan="Votre partenaire ERP de confiance",
                currency="USD"
            )
            session.add(enterprise)
            session.commit()
            print("‚úÖ Entreprise par d√©faut cr√©√©e")
        else:
            enterprise = existing_enterprise
        
        # V√©rifier si un utilisateur admin existe d√©j√†
        existing_admin = session.query(User).filter_by(email="admin@ayanna.com").first()
        if not existing_admin:
            # Cr√©er un utilisateur admin par d√©faut
            admin_user = User(
                enterprise_id=enterprise.id,
                name="Administrateur",
                email="admin@ayanna.com",
                role="admin"
            )
            admin_user.set_password("admin123")  # Mot de passe par d√©faut
            session.add(admin_user)
            session.commit()
            
            print("‚úÖ Utilisateur administrateur cr√©√©")
            print("üìß Email: admin@ayanna.com")
            print("üîë Mot de passe: admin123")
            print("‚ö†Ô∏è  Changez ce mot de passe apr√®s la premi√®re connexion!")
        else:
            print("‚úÖ Utilisateur administrateur existe d√©j√†")
        
        session.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'administrateur: {e}")
        return False


def create_desktop_shortcut():
    """Cr√©er un raccourci sur le bureau (Linux)"""
    try:
        desktop_path = Path.home() / "Desktop"
        if not desktop_path.exists():
            desktop_path = Path.home() / "Bureau"  # Fran√ßais
        
        if desktop_path.exists():
            shortcut_path = desktop_path / "Ayanna ERP.desktop"
            current_dir = Path(__file__).parent.absolute()
            main_script = current_dir / "main.py"
            
            desktop_content = f"""[Desktop Entry]
Name=Ayanna ERP
Comment=Syst√®me de Gestion Int√©gr√©
Exec=python3 "{main_script}"
Icon=application-x-executable
Terminal=false
Type=Application
Categories=Office;
"""
            
            with open(shortcut_path, 'w') as f:
                f.write(desktop_content)
            
            # Rendre le fichier ex√©cutable
            os.chmod(shortcut_path, 0o755)
            
            print(f"‚úÖ Raccourci cr√©√© sur le bureau: {shortcut_path}")
            return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de cr√©er le raccourci: {e}")
        return False


def main():
    """Fonction principale d'installation"""
    print("üöÄ Installation d'Ayanna ERP")
    print("=" * 40)
    
    success = True
    
    # √âtape 0: V√©rification de Python
    if not check_python_version():
        success = False
        sys.exit(1)
    
    # √âtape 1: Installation des d√©pendances
    if not install_dependencies():
        success = False
    
    print()
    
    # √âtape 2: Cr√©ation de la base de donn√©es
    if success and not create_database():
        success = False
    
    print()
    
    # √âtape 3: Cr√©ation de l'utilisateur admin
    if success and not create_default_admin():
        success = False
    
    print()
    
    # √âtape 4: Cr√©ation du raccourci (optionnel)
    create_desktop_shortcut()
    
    print()
    print("=" * 40)
    
    if success:
        print("üéâ Installation termin√©e avec succ√®s!")
        print()
        print("Pour d√©marrer Ayanna ERP:")
        if Path("venv").exists():
            print("1. ./run.sh start")
            print("2. Ou: source venv/bin/activate && python main.py")
        else:
            print("1. ./run.sh start")
            print("2. Ou: python3 main.py")
        print()
        print("Ou utilisez le raccourci sur le bureau si cr√©√©.")
        print()
        print("Identifiants par d√©faut:")
        print("Email: admin@ayanna.com")
        print("Mot de passe: admin123")
    else:
        print("‚ùå L'installation a √©chou√©. V√©rifiez les erreurs ci-dessus.")
        sys.exit(1)


if __name__ == "__main__":
    main()
