#!/usr/bin/env python3
"""
Test de cr√©ation automatique d'entrep√¥ts lors de la cr√©ation d'entreprise
"""

import sys
import os

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.abspath('.'))

from ayanna_erp.database.database_manager import DatabaseManager
from ayanna_erp.modules.boutique.model.models import ShopWarehouse

def test_automatic_warehouse_creation():
    """Tester la cr√©ation automatique d'entrep√¥ts"""
    print("üß™ Test de cr√©ation automatique d'entrep√¥ts")
    print("=" * 60)
    
    db_manager = DatabaseManager()
    
    try:
        with db_manager.get_session() as session:
            # V√©rifier les entrep√¥ts existants
            existing_warehouses = session.query(ShopWarehouse).all()
            print(f"üì¶ Entrep√¥ts existants: {len(existing_warehouses)}")
            
            # Afficher tous les entrep√¥ts existants par POS
            pos_warehouses = {}
            for warehouse in existing_warehouses:
                if warehouse.pos_id not in pos_warehouses:
                    pos_warehouses[warehouse.pos_id] = []
                pos_warehouses[warehouse.pos_id].append(warehouse)
            
            for pos_id, warehouses in pos_warehouses.items():
                print(f"\nüìç POS {pos_id}:")
                for warehouse in warehouses:
                    print(f"   ‚Ä¢ {warehouse.name} ({warehouse.code})")
                    print(f"     Type: {warehouse.type}")
                    print(f"     Par d√©faut: {'Oui' if warehouse.is_default else 'Non'}")
                    print(f"     Actif: {'Oui' if warehouse.is_active else 'Non'}")
            
            # V√©rifier la structure attendue
            main_warehouses = [w for w in existing_warehouses if w.type == "Principal"]
            pos_warehouses_list = [w for w in existing_warehouses if w.type == "Point de Vente"]
            
            print(f"\nüìä Analyse de la structure:")
            print(f"   ‚Ä¢ Entrep√¥ts principaux: {len(main_warehouses)}")
            print(f"   ‚Ä¢ Entrep√¥ts POS: {len(pos_warehouses_list)}")
            
            print(f"\nüéØ R√âSULTAT:")
            if len(main_warehouses) > 0 and len(pos_warehouses_list) > 0:
                print("‚úÖ Entrep√¥ts automatiques d√©tect√©s!")
                print("   ‚Ä¢ Les entrep√¥ts principaux et POS sont pr√©sents")
                print("   ‚Ä¢ La fonctionnalit√© de cr√©ation automatique fonctionne")
            else:
                print("‚ö†Ô∏è Structure d'entrep√¥ts √† mettre √† jour")
                print("   ‚Ä¢ Les entrep√¥ts actuels utilisent des types diff√©rents")
                print("   ‚Ä¢ Types trouv√©s:", set(w.type for w in existing_warehouses))
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_automatic_warehouse_creation()
    if success:
        print("\n‚úÖ Test termin√© avec succ√®s!")
    else:
        print("\n‚ùå Des erreurs ont √©t√© d√©tect√©es dans le test.")